@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <title>Mapbox / Leaflet / Google Map GeoCoding</title>
    <meta name="viewport" content="width=device-width" />
    <meta charset="UTF-8">
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")

    @*mapbox script&css*@
    @*<script src="https://api.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css" rel="stylesheet" />*@

    @*add leaflet css&script*@
    <link href="~/node_modules/leaflet/dist/leaflet.css" rel="stylesheet" />
    @Scripts.Render("~/bundles/leaflet")

    @*add leaflet plugins*@
    <script src="~/node_modules/leaflet.browser.print/dist/leaflet.browser.print.min.js"></script>
    <script src="~/Scripts/plugins/Leaflet.Control.Custom.js"></script>
    @*Plugins leaflet-locatecontrol*@

    <link href="~/node_modules/leaflet.locatecontrol/dist/L.Control.Locate.css" rel="stylesheet" />
    <script src="~/node_modules/leaflet.locatecontrol/dist/L.Control.Locate.min.js"></script>


    <link href="~/node_modules/leaflet-control-geocoder/dist/Control.Geocoder.css" rel="stylesheet" />
    <script src="~/node_modules/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    
    @*add Google Map API*@
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDKZUGWLVGsk1mqeSugFZQbigzOgn_VMkE"></script>
    <style type="text/css">
        body {
            display: block;
            margin: 0px;
            padding: 5px 0 0 0;
            height: 100%;
        }

        #mapid {
            position: absolute;
            width: 100%;
            height: 100%;
            overflow: hidden;
        }
    </style>
</head>
<body>
    <div id="mapid"></div>
    <script>
        var mymap, tileLayer, maker, printer, locater,geocoder,geoLocater;
        const initlatlng = [25.044308271193106, 121.52936895061339];
        getMapObject(initlatlng);
        document.getElementById("search").addEventListener("click", function () {
            const queryResult = document.getElementById("queryString");
            if (queryResult.value !== "") {
                geocodeAddress(queryResult.value);
            }
        });
        /*
         * 取得 Popup 文字
         */
        function getLatLngText(latlngList) {
            if (latlngList !== undefined && latlngList !== null) {
                if (latlngList.length < 2) {
                    return `<p>請給我完整經緯度資料</p>`;
                }
            } else {
                return `<p>請給我經緯度資料</p>`;
            }
            const [lat, lng] = latlngList;
            return `<p>經度：${lng}<br />緯度：${lat}</p>`;
        };
        /*
         * 設定 Maker 與 Popup 文字
         */
        function setMakerClick(latlng, refMap) {
            maker = L.marker(latlng).bindPopup(getLatLngText(latlng));
            maker.addTo(refMap);
        }
        function getMapObject(latlng) {
            const mapOption = {
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                zoom: 24,
                id: 'mapbox.streets',
                accessToken: 'sk.eyJ1IjoiYW5keXRhMjQiLCJhIjoiY2pwa2lydGg0MDNvYzN4czg0dWppd3FkNiJ9.E6mIiiD1nsXf5XS_-3G5nA',
                foo: 'OpenStreetMap'
            };
            const locateOptions = {
                watch: true,
                enableHighAccuracy: true
            };
            const zoomOptions = {
                animate: false
            };
            // tileLayer
            // mapbox,OSM
            const tileLayerOptions = {
                attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
                detectRetina: true
            }
            const tileLayerStr = 'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}';
            const openStreetMaptileLayerStr = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png";
            const getContent = function () {
                const html = '<div class="input-group">' +
                    '            <input id="queryString" type="text" class="form-control input-sm" placeholder="輸入你要找的地址">' +
                    '            <span class="input-group-btn">' +
                    '            <a class="btn btn-default btn-sm" id="search">' +
                    '            <i class="fa fa-search" aria-hidden="true" style="color:red"></i></a>' +
                    '            </span>' +
                    '         </div>';
                return html;
            }
            const setPopupText = function (refLatlng, refMap) {
                if (refMap !== undefined) {
                    const latlngList = [refLatlng.lat, refLatlng.lng];
                    L.popup()
                        .setLatLng(refLatlng)
                        .setContent(getLatLngText(latlngList))
                        .openOn(refMap);
                }
            }
            mymap = L.map('mapid');

            //OpenStreetMap
            tileLayer = L.tileLayer(openStreetMaptileLayerStr, tileLayerOptions);
            tileLayer.addTo(mymap);

            mymap.on('click', function (e) {
                setPopupText(e.latlng, this);
            });
            mymap.setView(latlng, 20, zoomOptions);
            // MapBox
            //tileLayer = L.tileLayer(tileLayerStr, mapOption);
            //tileLayer.addTo(mymap);
            /*
             * Google Map Developer Guide
             * https://developers.google.com/maps/documentation/geocoding/intro#geocoding
             */
            const googleGeoCoderOptions = {
                serviceUrl: "https://maps.googleapis.com/maps/api/geocode/json",
                defaultMarkGeocode: false,
                language: "zh-TW"
            }
            const googleGeoCoder = new L.Control.Geocoder.Google("AIzaSyDKZUGWLVGsk1mqeSugFZQbigzOgn_VMkE", googleGeoCoderOptions);

            const nominatimOption = {
                serviceUrl: "https://nominatim.openstreetmap.org/",
                defaultMarkGeocode: false
            }
            const nominatimGeoCoder = new L.Control.Geocoder.Nominatim(nominatimOption);
            const geocoderOption = {
                position : 'bottomright',
                collapsed: true,
                placeholder: 'Free Nominatim',
                errorMessage : "搜尋不到",
                geocoder: nominatimGeoCoder
            }
            geocoder = L.Control.geocoder(geocoderOption)
                .on('markgeocode', function (e) {
                    const bbox = e.geocode.bbox;
                    console.log(e);
                });
            geocoder.addTo(mymap);
            //let myFeatureGroup = L.featureGroup().addTo(mymap).on("click", makerClick);
            setMakerClick(latlng, mymap);
            locater = L.control.custom({
                position: 'topright',
                content: getContent(),
                classes: '',
                style: {
                    position: 'absolute',
                    right: '0px',
                    top: '0px',
                    'width': '300px'
                },
                events: {
                    click: function() { this.value = '' }
                }
            });
            locater.addTo(mymap);
            // plugin - print
            printer = L.control.browserPrint({
                title: 'Just print me!',
                documentTitle: '這是用 leaflet.browser.print 這個外掛',
                closePopupsOnPrint: false,
                printModes: [
                    L.control.browserPrint.mode.landscape(),
                    L.control.browserPrint.mode.custom("請在畫面上選擇一個區域")
                ]
            });
            printer.addTo(mymap);
            geoLocater = L.control.locate({
                strings: {
                    title: "定位到現在位置"
                }
            });
            geoLocater.addTo(mymap);
        }
        
        /*
         * geocode Services
         *
         * */
        function geocodeAddress(queryValue) {
            const geocoder = new google.maps.Geocoder();
            geocoder.geocode({
                'address': queryValue
            }, function (results, status) {
                if (status === 'OK') {
                    console.log(results[0], "Google 搜尋地理資訊結果");
                    const latlng = results[0].geometry.location;
                    const retuLatLng = [latlng.lat(), latlng.lng()];
                    mymap.setView(retuLatLng, 16);
                    setMakerClick(retuLatLng, mymap);
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }
    </script>
</body>

</html>
